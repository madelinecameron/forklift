#!/bin/bash

# Default configuration
DEFAULT_PORT=8000

# Function to parse env file
parse_env_file() {
  while IFS= read -r line || [[ -n "$line" ]]; do
    key="${line%=*}"
    value="${line#*=}"
    if [[ $value == \$\(*\) ]]; then
      # It's a bash command, execute it
      command="${value:2:-1}"
      echo "${key}=$(eval $command)"
    else
      # It's a plain text value
      echo "${key}=${value}"
    fi
  done < "$1"
}

# Main function to process arguments and generate files
generate_files() {
  local serviceName="$1"
  local url="$2"
  local port="${3:-$DEFAULT_PORT}"
  local envFile="$4"

  # Path to templates
  DOCKERFILE_TEMPLATE="templates/Dockerfile.template"
  DOCKERCOMPOSE_TEMPLATE="templates/docker-compose.template.yml"

  # Read templates
  dockerfile=$(<"$DOCKERFILE_TEMPLATE")
  dockerCompose=$(<"$DOCKERCOMPOSE_TEMPLATE")

  # Replace placeholders
  dockerfile=${dockerfile/\$\{EXPOSE_PORT\}/$port}
  dockerfile=${dockerfile//\$\{SERVICE_NAME\}/$serviceName}
  dockerCompose=${dockerCompose//\$\{SERVICE_NAME\}/$serviceName}
  dockerCompose=${dockerCompose//\$\{URL\}/$url}
  dockerCompose=${dockerCompose//\$\{PORT\}/$port}

  # Handle env file
  if [[ $envFile ]]; then
    envVars=$(parse_env_file "$envFile")
    dockerfile="$dockerfile

# Environment Variables
ENV $envVars"
  fi

  # Output the files
  echo "$dockerfile" > "./Dockerfile.$serviceName"
  echo "$dockerCompose" > "./docker-compose.$serviceName.yml"
}

# Command Line Argument Parsing
while getopts "p:e:" opt; do
  case $opt in
    p)
      port="$OPTARG"
      ;;
    e)
      envFile="$OPTARG"
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
  esac
done

shift $((OPTIND-1))

serviceName="$1"
url="$2"

# Call main function
generate_files "$serviceName" "$url" "$port" "$envFile"

